---
name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ## Run tests to gain confidence in your changes.
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          pip3 install yamllint
          npm install -g yaml-schema-validator
      - name: Lint YAML files
        run: |
          find . -type f \( -name "*.yml" -o -name "*.yaml" \) \
            -print -exec yamllint {} \;
      - name: Validate YAML schema
        run: |
          find . -type f \( -name "*.yml" -o -name "*.yaml" \) \
            -print -exec npx yaml-schema-validator -s schema.json {} \;

  infrastructure-as-code:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - uses: opentofu/setup-opentofu@v1

      - name: OpenTofu fmt
        id: fmt
        run: tofu fmt
        continue-on-error: true

      - name: OpenTofu Init
        id: init
        run: tofu init

      - name: OpenTofu switch to STG workspace
        id: workspace
        run: tofu workspace select -or-create stg
        continue-on-error: true

      - name: OpenTofu Validate
        id: validate
        run: tofu validate -no-color

      - name: OpenTofu Plan
        id: plan
        run: tofu plan -no-color
        continue-on-error: true

      # Taken from the github docs
      # Sending the plan back to the
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "tofu\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // strip out any sensitive data from the plan output
            const sanitizedPlan = process.env.PLAN
              .replace(/project\s*=\s*"[^"]*"/g, 'project="*****"')
              .replace(/project_id\s*=\s*"[^"]*"/g, 'project_id="*****"')
              .replace(/secret\s*=\s*"[^"]*"/g, 'secret="*****"');

            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### OpenTofu Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### OpenTofu Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### OpenTofu Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### OpenTofu Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${sanitizedPlan}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  build-module:
    ## on merge to main cut a new release
    needs: infrastructure-as-code
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v3

      - name: Build tofu/terraform Module
        run: |
          zip -r module.zip ./* \
            -x "*.git*" \
            -x "*terraform.tfstate*" \
            -x "*.terraform*" \
            -x "*test*"

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform-module
          path: module.zip

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          generate_release_notes: true
          files: |
            module.zip
            release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
